
openapi: 3.0.3
info:
  title: NFC Pay Starter API
  version: "1.0.0"
servers:
  - url: https://{baseUrl}
    variables:
      baseUrl:
        default: example.netlify.app
paths:
  /api/v1/sessions:
    post:
      summary: Create a payment session
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [terminalId, amount, currency]
              properties:
                terminalId: { type: string }
                amount: { type: integer }
                currency: { type: string }
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
        "401": { description: Unauthorized }
    get:
      summary: List sessions
      security:
        - ApiKeyAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Session' }
        "401": { description: Unauthorized }
  /api/v1/sessions/{id}:
    get:
      summary: Get session by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Session' }
        "401": { description: Unauthorized }
        "404": { description: Not Found }
  /api/sandbox/pay:
    post:
      summary: Sandbox - mark session as paid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [sessionId]
              properties:
                sessionId: { type: string }
          application/x-www-form-urlencoded:
            schema:
              type: object
              required: [sessionId]
              properties:
                sessionId: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  status: { type: string }
        "302": { description: Redirect if form-submitted }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Session:
      type: object
      properties:
        id: { type: string }
        terminalId: { type: string }
        amount: { type: integer }
        currency: { type: string }
        status: { type: string, enum: [pending, paid, error] }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
